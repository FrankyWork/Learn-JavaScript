'use strict'

/*
    Числовой тип данных (number) представляет как целочисленные значения, так и числа с плавающей точкой.

    Существует множество операций для чисел, например, умножение *, деление /, сложение +, вычитание - и так далее.

    Кроме обычных чисел, существуют так называемые «специальные числовые значения», которые относятся к этому типу данных: Infinity, -Infinity и NaN.

    Infinity представляет собой математическую бесконечность ∞. Это особое значение, которое больше любого числа.

    NaN означает вычислительную ошибку. Это результат неправильной или неопределённой математической операции, например:
*/

/*
    Числа
*/
/*
    В JavaScript тип number не может безопасно работать с числами, большими, чем (253-1)
    (т. е. 9007199254740991) или меньшими, чем -(253-1) для отрицательных чисел.


    Чтобы создать значение типа BigInt, необходимо добавить n в конец числового литерала:
*/


/*
    Строки
*/

/*
    Строка (string) в JavaScript должна быть заключена в кавычки.
    Двойные кавычки: "Привет".
    Одинарные кавычки: 'Привет'.
    Обратные кавычки: `Привет`.
*/

let str = "Привет";
let str2 = 'Одинарные кавычки тоже подойдут';
let phrase = `Обратные кавычки позволяют встраивать переменные ${str}`;

/*
    Двойные или одинарные кавычки являются «простыми», между ними нет разницы в JavaScript.

    Обратные же кавычки имеют расширенную функциональность.
    Они позволяют нам встраивать выражения в строку, заключая их в ${…}. Например:
*/

// Объявление и инициализация переменной name
let name = 'dany';

// Выводим выражение в строку через функцию alert
alert(`Hello , ${name}!`);

/*
    Булевый тип
*/

/*
    Булевый тип (boolean) может принимать только два значения: true (истина) и false (ложь).
    Булевые значения также могут быть результатом сравнений:
*/

// Объявляем и инициализируем переменную fistNumber
let fistNumber = 5

// Объявляем и инициализируем переменную secondNumber
let secondNumber = 1

// Объявляем и инициализируем буливую переменную isGreater
let isGreater = fistNumber > secondNumber;

// Выводим выражение в строку через функцию alert
alert(`${fistNumber} > ${secondNumber} = ${isGreater}`)


/*
    Значение «null»
*/

/*
    В JavaScript null не является «ссылкой на несуществующий объект» или «нулевым указателем», как в некоторых других языках.

    Это просто специальное значение, которое представляет собой «ничего», «пусто» или «значение неизвестно».
*/

/*
    Значение «undefined»
*/

/*
    Специальное значение undefined также стоит особняком. Оно формирует тип из самого себя так же, как и null.

    Оно означает, что «значение не было присвоено».

    Если переменная объявлена, но ей не присвоено никакого значения, то её значением будет undefined.

    let age;

    alert(age); // выведет "undefined"
*/

/*
    Объекты и символы
*/

/*
    Все остальные типы называются «примитивными», потому что их значениями могут быть только простые значения (будь то строка, или число, или что-то ещё).
    В объектах же хранят коллекции данных или более сложные структуры.

    Тип symbol (символ) используется для создания уникальных идентификаторов в объектах.
    Мы упоминаем здесь о нём для полноты картины, изучим этот тип после объектов.
*/

/*
    Оператор typeof
*/

/*
    Оператор typeof возвращает тип аргумента. Это полезно, когда мы хотим обрабатывать значения различных типов по-разному или просто хотим сделать проверку.
*/

// Обычный синтаксис
typeof 5 // Выведет "number"
// Синтаксис, напоминающий вызов функции (встречается реже)
typeof(5) // Также выведет "number"

/*
    Если передается выражение, то нужно заключать его в скобки, т.к. typeof имеет более высокий приоритет, чем бинарные операторы:
*/

typeof 50 + " Квартир"; // Выведет "number Квартир"
typeof (50 + " Квартир"); // Выведет "string"

/*
    typeof undefined // "undefined"

    typeof 0 // "number"

    typeof 10n // "bigint"

    typeof true // "boolean"

    typeof "foo" // "string"

    typeof Symbol("id") // "symbol"

    typeof Math // "object"  (1)

    typeof null // "object"  (2)

    typeof alert // "function"  (3)
*/

/*
    Math — это встроенный объект, который предоставляет математические операции и константы.

    Результатом вызова typeof null является "object".
    Это официально признанная ошибка в typeof, ведущая начало с времён создания JavaScript и сохранённая для совместимости.
    Конечно, null не является объектом. Это специальное значение с отдельным типом.

    Вызов typeof alert возвращает "function", потому что alert является функцией.
    Функции относятся к объектному типу. Но typeof обрабатывает их особым образом, возвращая "function".
*/




